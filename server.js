const express = require('express');
const cors = require('cors');
require('dotenv').config();
const admin = require('firebase-admin');
const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);
const serviceAccount = JSON.parse(process.env.FIREBASE_SERVICE_JSON);

const twilio = require('twilio');
const client = twilio(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN);
const router = express.Router();
const { OpenAI } = require('openai');
const app = express();
const PORT = process.env.PORT || 5000;
const sgMail = require('@sendgrid/mail');
sgMail.setApiKey(process.env.SENDGRID_API_KEY);

// üß© Middleware
app.use(cors());
app.use(express.json());

// üîê Firebase init
admin.initializeApp({
    credential: admin.credential.cert(serviceAccount)
});
const db = admin.firestore();

// üè† –ì–æ–ª–æ–≤–Ω–∞
app.get('/', (req, res) => {
    res.send('Grinfood API is working ‚úÖ');
});

// üçî –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –ø–æ–∑–∏—Ü—ñ—ó –º–µ–Ω—é
app.get('/api/menu', async (req, res) => {
    try {
        const snapshot = await db.collection('menuItems').get();
        const items = snapshot.docs.map(doc => ({
            id: doc.id,
            ...doc.data()
        }));
        res.json(items);
    } catch (error) {
        console.error('‚ùå Error fetching menu:', error);
        res.status(500).json({ error: 'Failed to fetch menu' });
    }
});

// ‚ûï –î–æ–¥–∞—Ç–∏ –ø–æ–∑–∏—Ü—ñ—é –º–µ–Ω—é
app.post('/api/menu', async (req, res) => {
    try {
        const { name, price, image, category, description } = req.body;

        if (!name || !price || !image || !category) {
            return res.status(400).json({ error: 'All fields are required' });
        }

        const docRef = await db.collection('menuItems').add({
            name,
            price,
            image,
            category,
            description: description || '' // –î–æ–¥–∞—î–º–æ –æ–ø–∏—Å
        });

        res.status(201).json({ id: docRef.id, name, price, image, category, description });
    } catch (error) {
        console.error('‚ùå Error adding item:', error);
        res.status(500).json({ error: 'Failed to add item' });
    }
});



app.post('/api/orders', async (req, res) => {
    const token = req.headers.authorization?.split(' ')[1];

    if (!token) {
        return res.status(403).json({ error: '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó' });
    }

    try {
        const decodedToken = await admin.auth().verifyIdToken(token);
        const userId = decodedToken.uid;

        const { items, total, customer, address, paymentMethod } = req.body;

        if (!items || !total || !customer || !address || !paymentMethod) {
            return res.status(400).json({ error: 'Missing order data' });
        }

        const order = {
            items,
            total,
            customer,
            address,
            paymentMethod,
            userId,
            createdAt: admin.firestore.Timestamp.now(),

            status: 'pending',
        };

        const docRef = await db.collection('orders').add(order);
        res.status(201).json({ id: docRef.id, ...order });
    } catch (error) {
        console.error('‚ùå Error creating order:', error.message);
        res.status(500).json({ error: error.message || 'Failed to create order' });
    }
});


// üí≥ –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–ª–∞—Ç–µ–∂–Ω–∏–π –Ω–∞–º—ñ—Ä —á–µ—Ä–µ–∑ Stripe
app.post('/api/create-payment-intent', async (req, res) => {
    const token = req.headers.authorization?.split(' ')[1];

    if (!token) {
        return res.status(403).json({ error: '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó' });
    }

    try {
        await admin.auth().verifyIdToken(token);
        const { amount } = req.body;

        const paymentIntent = await stripe.paymentIntents.create({
            amount,
            currency: 'uah',
            payment_method_types: ['card'],
        });

        res.send({ clientSecret: paymentIntent.client_secret });
    } catch (error) {
        console.error('‚ùå Error creating payment intent:', error.message);
        res.status(500).json({ error: error.message || 'Failed to create payment intent' });
    }
});

// ‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
app.post('/api/signup', async (req, res) => {
    const { name, email, password, role = 'user' } = req.body;

    if (!name || !email || !password) {
        return res.status(400).json({ error: '–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ —ñ–º‚Äô—è, email —ñ –ø–∞—Ä–æ–ª—å' });
    }

    try {
        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        const userRecord = await admin.auth().createUser({
            email,
            password,
            displayName: name
        });

        console.log("üü¢ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–≤–æ—Ä–µ–Ω–∏–π:", userRecord.uid);

        // –ó–∞–ø–∏—Å —Ä–æ–ª—ñ —É Firestore
        const roleRef = db.collection('roles').doc(userRecord.uid);
        await roleRef.set({ role });

        const writtenRole = await roleRef.get();
        if (!writtenRole.exists) {
            throw new Error("‚ùó–†–æ–ª—å –Ω–µ –∑–±–µ—Ä–µ–≥–ª–∞—Å—å —É Firestore");
        }

        console.log("üìÑ –†–æ–ª—å –∑–±–µ—Ä–µ–∂–µ–Ω–∞:", writtenRole.data());

        // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–æ–∫–µ–Ω–∞
        const token = await admin.auth().createCustomToken(userRecord.uid);

        return res.status(201).json({
            message: 'User created successfully',
            user: userRecord,
            token: token
        });
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', error);
        return res.status(500).json({ error: error.message || 'Failed to register user' });
    }
});



// –í—Ö—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
app.post('/api/signin', async (req, res) => {
    const { email, password } = req.body;

    try {
        const userRecord = await admin.auth().getUserByEmail(email);
        const token = await admin.auth().createCustomToken(userRecord.uid);

        res.status(200).json({ message: 'User signed in successfully', token });
    } catch (error) {
        console.error('‚ùå Error signing in user:', error);
        res.status(400).json({ error: 'Failed to sign in user' });
    }
});

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
app.get('/api/check-auth', async (req, res) => {
    const token = req.headers.authorization?.split(' ')[1];

    if (!token) {
        return res.status(403).json({ error: 'No token provided' });
    }

    try {
        const decodedToken = await admin.auth().verifyIdToken(token);
        const uid = decodedToken.uid;

        res.status(200).json({ message: 'User is authorized', uid });
    } catch (error) {
        console.error('‚ùå Error verifying token:', error);
        res.status(403).json({ error: 'Invalid token' });
    }
});

// üî• –û–Ω–æ–≤–ª–µ–Ω–Ω—è email –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ –±–µ–∫–µ–Ω–¥
app.post('/api/update-email', async (req, res) => {
    const token = req.headers.authorization?.split(' ')[1];

    if (!token) {
        return res.status(403).json({ error: '–ù–µ–º–∞—î —Ç–æ–∫–µ–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó' });
    }

    const { newEmail } = req.body;

    if (!newEmail) {
        return res.status(400).json({ error: '–ù–µ –≤–∫–∞–∑–∞–Ω–∞ –Ω–æ–≤–∞ –ø–æ—à—Ç–∞' });
    }

    try {
        const decodedToken = await admin.auth().verifyIdToken(token);
        const uid = decodedToken.uid;

        await admin.auth().updateUser(uid, {
            email: newEmail
        });
        console.log(`üìß Updating user ${uid} email to ${newEmail}`);

        return res.status(200).json({ message: '–ü–æ—à—Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ' });
    } catch (error) {
        console.error('‚ùå Error updating email:', error);
        return res.status(500).json({ error: error.message || '–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è email' });
    }
});

// üÜï –û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
app.get('/api/get-role', async (req, res) => {
    const token = req.headers.authorization?.split(' ')[1];
    if (!token) return res.status(403).json({ error: 'No token provided' });

    try {
        const decodedToken = await admin.auth().verifyIdToken(token);
        const uid = decodedToken.uid;

        console.log(`üìù –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–ª—ñ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${uid}`);

        const roleDoc = await db.collection('roles').doc(uid).get();

        if (!roleDoc.exists) {
            return res.json({ role: 'user' });
        }

        return res.json({ role: roleDoc.data().role || 'user' });
    } catch (error) {
        console.error('‚ùå Error getting role:', error);
        return res.status(500).json({ error: 'Failed to get role' });
    }
});

// üßæ –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º (pending / confirmed)
app.get('/api/orders/by-status/:status', async (req, res) => {
    const token = req.headers.authorization?.split(' ')[1];
    const { status } = req.params;

    if (!token) return res.status(403).json({ error: '–ù–µ–º–∞—î —Ç–æ–∫–µ–Ω—É' });

    try {
        const decoded = await admin.auth().verifyIdToken(token);
        const uid = decoded.uid;

        const roleDoc = await db.collection('roles').doc(uid).get();
        if (!roleDoc.exists || roleDoc.data().role !== 'manager') {
            return res.status(403).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤' });
        }

        const snapshot = await db.collection('orders')
            .where('status', '==', status)
            .get();

        let orders = snapshot.docs.map(doc => ({
            id: doc.id,
            ...doc.data()
        }));

        // üïê –†—É—á–Ω–µ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ createdAt ‚Üì
        orders = orders.sort((a, b) => {
            const aTime = a.createdAt?.toMillis?.() || 0;
            const bTime = b.createdAt?.toMillis?.() || 0;
            return bTime - aTime;
        });

        res.json(orders);
    } catch (err) {
        console.error('‚ùå Order fetch error:', err);
        res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å' });
    }
});



// üîÑ –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞)
app.patch('/api/orders/:id/status', async (req, res) => {
    const token = req.headers.authorization?.split(' ')[1];
    const { id } = req.params;
    const { status } = req.body;

    if (!token) return res.status(403).json({ error: '–ù–µ–º–∞—î —Ç–æ–∫–µ–Ω—É' });
    if (!['confirmed', 'cancelled'].includes(status)) {
        return res.status(400).json({ error: '–ù–µ–¥—ñ–π—Å–Ω–∏–π —Å—Ç–∞—Ç—É—Å' });
    }

    try {
        const decoded = await admin.auth().verifyIdToken(token);
        const uid = decoded.uid;

        const roleDoc = await db.collection('roles').doc(uid).get();
        if (!roleDoc.exists || roleDoc.data().role !== 'manager') {
            return res.status(403).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤' });
        }

        await db.collection('orders').doc(id).update({ status });

        res.json({ message: `–°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–æ "${status}"` });
    } catch (err) {
        console.error('‚ùå Update order error:', err);
        res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è' });
    }
});




// üìù –û–Ω–æ–≤–∏—Ç–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é
app.put('/api/menu/:id', async (req, res) => {
    const token = req.headers.authorization?.split(' ')[1];
    if (!token) return res.status(403).json({ error: '–ù–µ–º–∞—î —Ç–æ–∫–µ–Ω—É' });

    try {
        const { id } = req.params;
        const { name, price, image, category, description } = req.body;

        await db.collection('menuItems').doc(id).update({
            name,
            price,
            image,
            category,
            description: description || ''
        });
        res.json({ message: '–û–Ω–æ–≤–ª–µ–Ω–æ' });
    } catch (err) {
        console.error('‚ùå Menu update error:', err);
        res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è' });
    }
});



// ‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é
app.delete('/api/menu/:id', async (req, res) => {
    const token = req.headers.authorization?.split(' ')[1];
    if (!token) return res.status(403).json({ error: '–ù–µ–º–∞—î —Ç–æ–∫–µ–Ω—É' });

    try {
        const { id } = req.params;
        await db.collection('menuItems').doc(id).delete();
        res.json({ message: '–í–∏–¥–∞–ª–µ–Ω–æ' });
    } catch (err) {
        console.error('‚ùå Menu delete error:', err);
        res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è' });
    }
});





// üì£ –†–æ—É—Ç–µ—Ä–∏ –¥–ª—è –∞–∫—Ü—ñ–π (promotions)

// ‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–∫—Ü—ñ—é
app.post('/api/promotions', async (req, res) => {
    const token = req.headers.authorization?.split(' ')[1];
    if (!token) return res.status(403).json({ error: '–ù–µ–º–∞—î —Ç–æ–∫–µ–Ω—É' });

    try {
        const decoded = await admin.auth().verifyIdToken(token);
        const uid = decoded.uid;
        const roleDoc = await db.collection('roles').doc(uid).get();

        if (!roleDoc.exists || roleDoc.data().role !== 'manager') {
            return res.status(403).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤' });
        }

        const { title, description, image, startDate, endDate, active } = req.body;

        console.log('üì• –û—Ç—Ä–∏–º–∞–Ω–æ —Ç—ñ–ª–æ –∑–∞–ø–∏—Ç—É –Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–∫—Ü—ñ—ó:', req.body);

        if (!title || !description || !image || !startDate || !endDate) {
            return res.status(400).json({ error: '–í—Å—ñ –ø–æ–ª—è –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤—ñ' });
        }

        const docRef = await db.collection('promotions').add({
            title,
            description,
            image,
            active: !!active,
            startDate: admin.firestore.Timestamp.fromDate(new Date(startDate)),
            endDate: admin.firestore.Timestamp.fromDate(new Date(endDate)),
            createdAt: admin.firestore.Timestamp.now()
        });

        console.log('‚úÖ –ê–∫—Ü—ñ—é —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑ ID:', docRef.id);

        res.status(201).json({ id: docRef.id });
    } catch (err) {
        console.error('‚ùå Error adding promotion:', err);
        res.status(500).json({ error: '–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –∞–∫—Ü—ñ—é' });
    }
});

// üîê –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∞–∫—Ü—ñ—ó (–¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞)
app.get('/api/promotions/all', async (req, res) => {
    const token = req.headers.authorization?.split(' ')[1];
    if (!token) return res.status(403).json({ error: '–ù–µ–º–∞—î —Ç–æ–∫–µ–Ω—É' });

    try {
        const decoded = await admin.auth().verifyIdToken(token);
        const uid = decoded.uid;
        const roleDoc = await db.collection('roles').doc(uid).get();

        if (!roleDoc.exists || roleDoc.data().role !== 'manager') {
            return res.status(403).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤' });
        }

        const snapshot = await db.collection('promotions').orderBy('startDate', 'desc').get();
        const promotions = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));

        res.json(promotions);
    } catch (err) {
        console.error('‚ùå Error fetching all promotions:', err);
        res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ü—ñ–π' });
    }
});

// üîì –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ –∞–∫—Ü—ñ—ó (–¥–æ—Å—Ç—É–ø–Ω–æ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º)
app.get('/api/promotions', async (req, res) => {
    try {
        const now = admin.firestore.Timestamp.now();
        const snapshot = await db.collection('promotions')
            .where('active', '==', true)
            .where('startDate', '<=', now)
            .where('endDate', '>=', now)
            .orderBy('startDate', 'desc')
            .get();

        const items = snapshot.docs.map(doc => ({
            id: doc.id,
            ...doc.data()
        }));

        res.json(items);
    } catch (err) {
        console.error('‚ùå Error fetching promotions:', err);
        res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ü—ñ–π' });
    }
});

// üìù –û–Ω–æ–≤–∏—Ç–∏ –∞–∫—Ü—ñ—é
app.put('/api/promotions/:id', async (req, res) => {
    const token = req.headers.authorization?.split(' ')[1];
    if (!token) return res.status(403).json({ error: '–ù–µ–º–∞—î —Ç–æ–∫–µ–Ω—É' });

    try {
        const decoded = await admin.auth().verifyIdToken(token);
        const uid = decoded.uid;
        const roleDoc = await db.collection('roles').doc(uid).get();

        if (!roleDoc.exists || roleDoc.data().role !== 'manager') {
            return res.status(403).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤' });
        }

        const { id } = req.params;
        const { title, description, image, startDate, endDate, active } = req.body;

        console.log(`‚úèÔ∏è –ó–∞–ø–∏—Ç –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–∫—Ü—ñ—ó ${id}:`, req.body);

        if (!title || !description || !image || !startDate || !endDate) {
            return res.status(400).json({ error: '–í—Å—ñ –ø–æ–ª—è –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤—ñ' });
        }

        await db.collection('promotions').doc(id).update({
            title,
            description,
            image,
            startDate: admin.firestore.Timestamp.fromDate(new Date(startDate)),
            endDate: admin.firestore.Timestamp.fromDate(new Date(endDate)),
            active: !!active
        });

        console.log('üÜó –ê–∫—Ü—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–æ:', id);

        res.json({ message: '–ê–∫—Ü—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–æ' });
    } catch (err) {
        console.error('‚ùå Error updating promotion:', err);
        res.status(500).json({ error: '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∞–∫—Ü—ñ—é' });
    }
});

// üóë –í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫—Ü—ñ—é (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞)
app.delete('/api/promotions/:id', async (req, res) => {
    const token = req.headers.authorization?.split(' ')[1];
    if (!token) return res.status(403).json({ error: '–ù–µ–º–∞—î —Ç–æ–∫–µ–Ω—É' });

    try {
        const decoded = await admin.auth().verifyIdToken(token);
        const uid = decoded.uid;
        const roleDoc = await db.collection('roles').doc(uid).get();

        if (!roleDoc.exists || roleDoc.data().role !== 'manager') {
            return res.status(403).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤' });
        }

        const { id } = req.params;
        await db.collection('promotions').doc(id).delete();

        console.log('üóë –ê–∫—Ü—ñ—é –≤–∏–¥–∞–ª–µ–Ω–æ:', id);

        res.json({ message: '–ê–∫—Ü—ñ—é –≤–∏–¥–∞–ª–µ–Ω–æ' });
    } catch (err) {
        console.error('‚ùå Error deleting promotion:', err);
        res.status(500).json({ error: '–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∞–∫—Ü—ñ—é' });
    }
});



// ‚ûï –î–æ–¥–∞—Ç–∏ –≤—ñ–¥–≥—É–∫
app.post('/api/reviews', async (req, res) => {
    const token = req.headers.authorization?.split(' ')[1];
    if (!token) return res.status(403).json({ error: '–ù–µ–º–∞—î —Ç–æ–∫–µ–Ω—É' });

    try {
        const decoded = await admin.auth().verifyIdToken(token);
        const uid = decoded.uid;

        const { comment, ratingMenu, ratingStaff, ratingDelivery } = req.body;

        if (
            typeof ratingMenu !== 'number' ||
            typeof ratingStaff !== 'number' ||
            typeof ratingDelivery !== 'number'
        ) {
            return res.status(400).json({ error: '–í—Å—ñ –æ—Ü—ñ–Ω–∫–∏ –º–∞—é—Ç—å –±—É—Ç–∏ —á–∏—Å–ª–∞–º–∏' });
        }

        const userRecord = await admin.auth().getUser(uid);
        const userName = userRecord.displayName || userRecord.email;

        const review = {
            userId: uid,
            userName,
            comment: comment || '',
            ratingMenu,
            ratingStaff,
            ratingDelivery,
            createdAt: admin.firestore.Timestamp.now()
        };

        const docRef = await db.collection('reviews').add(review);
        res.status(201).json({ id: docRef.id, ...review });
    } catch (err) {
        console.error('‚ùå Error adding review:', err);
        res.status(500).json({ error: '–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –≤—ñ–¥–≥—É–∫' });
    }
});


// üì• –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –≤—ñ–¥–≥—É–∫–∏
app.get('/api/reviews', async (req, res) => {
    try {
        const snapshot = await db.collection('reviews')
            .orderBy('createdAt', 'desc')
            .get();

        const reviews = snapshot.docs.map(doc => ({
            id: doc.id,
            ...doc.data()
        }));

        res.json(reviews);
    } catch (err) {
        console.error('‚ùå Error fetching reviews:', err);
        res.status(500).json({ error: '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–≥—É–∫–∏' });
    }
});




app.get('/api/user/:uid', async (req, res) => {
    try {
        const user = await admin.auth().getUser(req.params.uid);
        res.json({ name: user.displayName || user.email });
    } catch (err) {
        res.status(404).json({ name: '–ê–Ω–æ–Ω—ñ–º' });
    }
});

// üìå –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É Firebase
app.get('/api/check-user-exists', async (req, res) => {
    const token = req.headers.authorization?.split(' ')[1];
    if (!token) return res.status(403).json({ error: 'No token provided' });

    try {
        const decoded = await admin.auth().verifyIdToken(token);
        const uid = decoded.uid;

        const user = await admin.auth().getUser(uid);

        // üëá –∫–ª—é—á–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ ‚Äî —á–∏ —î —Ö–æ—á–∞ –± 1 email
        if (!user.email) {
            return res.status(404).json({ error: 'User not registered' });
        }

        // ‚úÖ –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ —î —Ä–æ–ª—å –≤ Firestore
        const roleDoc = await db.collection('roles').doc(uid).get();
        if (!roleDoc.exists) {
            return res.status(404).json({ error: 'User role not found' });
        }

        res.json({ exists: true });
    } catch (error) {
        console.error('‚ùå User existence check error:', error);
        res.status(500).json({ error: 'User not found' });
    }
});



// ‚úÖ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ SMS-–∫–æ–¥
app.post('/api/verify/send-otp', async (req, res) => {
    const { phone } = req.body;

    if (!phone) return res.status(400).json({ error: 'Missing phone number' });

    try {
        const verification = await client.verify.v2
            .services(process.env.TWILIO_VERIFY_SERVICE_SID)
            .verifications.create({ to: phone, channel: 'sms' });

        res.json({ success: true, status: verification.status });
    } catch (err) {
        console.error('‚ùå Send OTP error:', err.message);
        res.status(500).json({ error: err.message });
    }
});

// ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
app.post('/api/verify/verify-otp', async (req, res) => {
    const { phone, code } = req.body;

    if (!phone || !code) return res.status(400).json({ error: 'Missing phone or code' });

    try {
        const check = await client.verify.v2
            .services(process.env.TWILIO_VERIFY_SERVICE_SID)
            .verificationChecks.create({ to: phone, code });

        res.json({ success: check.status === 'approved', status: check.status });
    } catch (err) {
        console.error('‚ùå Verify OTP error:', err.message);
        res.status(500).json({ error: err.message });
    }
});

// üì© –°–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ Firebase
app.post('/api/forgot-password', async (req, res) => {
    const { email } = req.body;

    if (!email) {
        return res.status(400).json({ error: '–ü–æ—à—Ç–∞ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∞' });
    }

    try {
        const resetLink = await admin.auth().generatePasswordResetLink(email, {
            url: process.env.RESET_REDIRECT_URL || 'https://grinfood-c34ac.web.app/reset-password',
        });

        const msg = {
            to: email,
            from: process.env.SENDGRID_FROM_EMAIL, // –ø—Ä–∏–∫–ª–∞–¥: grinfood.support@gmail.com
            subject: 'üîê –°–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è –¥–æ GrinFood',
            html: `
                <p>–í—ñ—Ç–∞—î–º–æ!</p>
                <p>–©–æ–± —Å–∫–∏–Ω—É—Ç–∏ –ø–∞—Ä–æ–ª—å, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:</p>
                <a href="${resetLink}" style="background:#4CAF50;color:white;padding:10px 20px;border-radius:6px;text-decoration:none;">
                    –°–∫–∏–Ω—É—Ç–∏ –ø–∞—Ä–æ–ª—å
                </a>
                <p>–Ø–∫—â–æ –≤–∏ –Ω–µ –∑–∞–ø–∏—Ç—É–≤–∞–ª–∏ —Å–∫–∏–¥–∞–Ω–Ω—è ‚Äî –ø—Ä–æ—Å—Ç–æ —ñ–≥–Ω–æ—Ä—É–π—Ç–µ —Ü–µ–π –ª–∏—Å—Ç.</p>
                <br />
                <small>GrinFood Team</small>
            `,
        };

        await sgMail.send(msg);
        console.log(`üì§ Email sent to ${email}`);
        res.status(200).json({ message: 'üì© –õ–∏—Å—Ç –∑—ñ —Å–∫–∏–¥–∞–Ω–Ω—è–º –ø–∞—Ä–æ–ª—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ' });
    } catch (error) {
        console.error('‚ùå SendGrid Error:', error.message);
        res.status(500).json({ error: '–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ª–∏—Å—Ç' });
    }
});




// ‚úÖ –ü—É–±–ª—ñ—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —ñ—Å–Ω—É—î –∞–∫–∞—É–Ω—Ç –∑ —Ç–∞–∫–æ—é –ø–æ—à—Ç–æ—é
app.post('/api/check-user-by-email', async (req, res) => {
    const { email } = req.body;

    if (!email) {
        return res.status(400).json({ error: '–ü–æ—à—Ç–∞ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∞' });
    }

    try {
        await admin.auth().getUserByEmail(email);
        res.json({ exists: true });
    } catch (err) {
        console.error('‚ùå Email –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ:', email);
        res.status(404).json({ error: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    }
});




// ‚úÖ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`‚úÖ Server is running at http://localhost:${PORT}`);

    // ‚úÖ –õ–æ–≥ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ .env (—Ç–∏–º—á–∞—Å–æ–≤–æ)
    console.log('üõ† TWILIO_VERIFY_SERVICE_SID:', process.env.TWILIO_VERIFY_SERVICE_SID || '‚ùå missing');
    console.log('üõ† TWILIO_ACCOUNT_SID:', process.env.TWILIO_ACCOUNT_SID ? '[OK]' : '‚ùå missing');
    console.log('üõ† TWILIO_AUTH_TOKEN:', process.env.TWILIO_AUTH_TOKEN ? '[OK]' : '‚ùå missing');
});